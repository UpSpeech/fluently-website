version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: upspeech_postgres_dev
    environment:
      POSTGRES_DB: upspeech_development
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - upspeech-network

  # Redis (for caching and background jobs)
  redis:
    image: redis:7-alpine
    container_name: upspeech_redis_dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - upspeech-network

  # Rails Backend API (Web Server)
  backend:
    build:
      context: ../app-backend
      dockerfile: Dockerfile.dev
    container_name: upspeech_backend_dev
    ports:
      - "3000:3000"
    environment:
      - RAILS_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/upspeech_development
      - REDIS_URL=redis://redis:6379/0
      - UPSPEECH_AI_URL=http://ai-service:8081
      - GROQ_API_KEY=${GROQ_API_KEY:-}
      - RAILS_MASTER_KEY=${RAILS_MASTER_KEY:-}
      - SOLID_QUEUE_SUPERVISOR=false
    volumes:
      - ../app-backend:/app
      - bundle_cache:/usr/local/bundle
      - upload_files:/app/tmp/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    stdin_open: true
    tty: true
    restart: unless-stopped
    networks:
      - upspeech-network

  # Rails Background Job Worker
  worker:
    build:
      context: ../app-backend
      dockerfile: Dockerfile.dev
    container_name: upspeech_worker_dev
    command: sh -c "sleep 10 && bin/worker"
    environment:
      - RAILS_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/upspeech_development
      - REDIS_URL=redis://redis:6379/0
      - UPSPEECH_AI_URL=http://ai-service:8081
      - GROQ_API_KEY=${GROQ_API_KEY:-}
      - RAILS_MASTER_KEY=${RAILS_MASTER_KEY:-}
      - SOLID_QUEUE_SUPERVISOR=true
      - RAILS_LOG_LEVEL=debug
      - SOLID_QUEUE_LOG_LEVEL=debug
    volumes:
      - ../app-backend:/app
      - bundle_cache:/usr/local/bundle
      - upload_files:/app/tmp/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      backend:
        condition: service_started
    restart: unless-stopped
    networks:
      - upspeech-network

  # React Frontend
  frontend:
    build:
      context: ../app-frontend
      dockerfile: Dockerfile.dev
    container_name: upspeech_frontend_dev
    ports:
      - "3001:3001"
    environment:
      - VITE_API_URL=http://localhost:3000/api/v1
      - VITE_API_BASE_URL=http://localhost:3000
      - VITE_APP_NAME=UpSpeech
      - VITE_NODE_ENV=development
    volumes:
      - ../app-frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    stdin_open: true
    tty: true
    restart: unless-stopped
    networks:
      - upspeech-network

  # Python AI Service
  ai-service:
    build:
      context: ../fluently-ai
      dockerfile: Dockerfile
    container_name: upspeech_ai_dev
    ports:
      - "8081:8081"
    environment:
      - GROQ_API_KEY=${GROQ_API_KEY:-}
    volumes:
      - ai_uploads:/app/uploads
    restart: unless-stopped
    networks:
      - upspeech-network

volumes:
  postgres_data:
  redis_data:
  bundle_cache:
  node_modules:
  upload_files:
  ai_uploads:

networks:
  upspeech-network:
    driver: bridge
